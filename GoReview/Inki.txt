1.stdout은 import “fmt”
2.그렇군
3.library를 받을 때는 go get
4.import 여러개는 저렇게
5.import를 따로도 할 수 있다
6.export(import 받은 라이브러리)할 때 첫문자는 대문자로
7.함수에서 반환, 매개변수 타입은 이름 뒤에 온다
8.같은 타입의 매개변수라면 한번에 쓸 수 있다 (x int, y int ==> x, y int)
9.함수의 반환은 여러개를 할 수 있다 (func swap(x, y string) (string, string) {…}
10.함수의 반환 값에 이름을 줄 수 있다(fund split(sum int) (x, y int) {..}
11.변수 선언은 var
12.변수 초기화 방법 (var x int = 1 또는 var java = “java”)
13.변수는 짧은 방법으로 선언 할 수 있다 (x := 1)
14.상수는 const로 선언하고 char, string, bool, 숫자 타입
15.숫자형 상수는  문맥에 따라 타입을 가진다 (선언 타입이 명시 안돼있으면 타입이 걍 변환됨)
16.go의 반복문 for (while은 없음) for i:=0; i<10; i++ {…}
17.for 2 - while문 처럼 for sum < 1000 { … }
18.같은얘기 ㅇㅇ..
19.무한루프 - for { … }
20.조건문 if x < 0 { … } - 소괄호가 없음
21.if + 짧은 명렁 - 변수 선언과 조건을 같이, if v:=match.Pow(x,n); v< lim {… }
22.if else - if v:=match.Pow(x,n); v< lim {… } else { .. }
23.연~~습
24.기본 자료형에는 bool, string, int, int8 … , uint, uint8 …, rune, float, complex
25.구조체는 type으로 명시 - type Vector struct { X int Y int }
26.구조체 필드는 dot(.)로 접근 v := Vector{1, 2} v.X=4
27.포인터 - C랑 비슷하나 포인터 연산은 불가능, 당연하지만 포인터 이용접근은 실제 구조체에 영향 p := Vector{1, 2} q := &p
28.구조체 생성에 이름을 줘도됨 - r = Vector{X: 1}
29.new 는 모든 필드가 0(zero value)이 할당된 T 타입의 포인터 반환 t := new(T)
===============================================================================================
30. 슬라이스는 배열의 값을 가리키고(point) 배열의 길이를 가지고있다 []T로 선언
31. 슬라이스는 자를 수 있다 당연히? s[lo:hi] lo에서 hi-1까지
32. 슬라이스는 만들 수 있다 당연히? a := make([]int, 5, 10) 매개변수는 순서대로 타입, 길이, 용량(capacity)
33. 슬라이스의 zero value는 nil (null x), nil 슬라이스의 길이는 당연히 0
34. Range —> for 반복문에서 순회할 때 사용
var pow = []int{1, 2, 3, 4, 5}
for i, v := range pow {
	…
}
35. _(언더바)를 이용하면 index나 value를 무시할 수 있다.
var pow = []int{1, 2, 3, 4, 5}
for _, v := range pow {
	…
}
36. 연습^^^^^^^^^^
37. 맵 —> key와 value를 저장하는 놈, 생성 할 때 make을 무조건 이용해야함
var m map[string]Vertex
m = make(map[string]Vertex)
38. 맵 리터럴 : 다른 구조체들 처럼 값을 쭈우욱 쓸 수 있지만 key를 꼭 써줘야한다. like that
var m = map[string]Vertex{
    "Bell Labs": Vertex{
        40.68433, -74.39967,
    },
    "Google": Vertex{
        37.42202, -122.08408,
    },
}
39. 맵 리터럴 시 타입을 생략할 수 있다 like that
var m = map[string]Vertex{
    "Bell Labs": {40.68433, -74.39967},
    "Google":    {37.42202, -122.08408},
}
40. 맵에 요소 삽입 또는 수정
m[key] = elem
맵에 요소 가져오기
elem = m[key]
요소 지우기
delete(m, key)
존재 확인하기
elem, ok = m[key]
41. 연습^^^^^^^^^^^^
42. 함수 값 : 함수도 값이다
hypot := func(x, y float64) float64 {
        return math.Sqrt(x*x + y*y)
    }

    fmt.Println(hypot(3, 4))
func(x, y float64) float64 이라는 함수를 hypot 함수에 담는다
43. 함수 클로져
func adder() func(int) int {
    sum := 0
    return func(x int) int {
        sum += x
        return sum
    }
}

func main() {
    pos, neg := adder(), adder()
    for i := 0; i < 10; i++ {
        fmt.Println(
            pos(i),
            neg(-2*i),
        )
    }
}
함수 adder는 각 pos, neg 변수에 담긴다. 이 때 각 변수의 adder함수 내에 sum := 0이 실행된다.
pos(i)가 불리게 되면 pos에 담긴 adder 함수의 반환 값은 func 함수가 호출된다. sum 값은 처응메 선언되었기 때문에 sum 값에 x를 더한 후 반환한다. neg 역시 마찬가지 방식으로 실행되고 여기서 각 변수에 sum은 공유되지 않는다.
44. 연습~~~~~~~~
func fibonacci() func() int {
    a, b := 1, 1
    return func() int {
        a, b = b, a+b
        return a
    }
}

func main() {
    f := fibonacci()
    for i := 0; i < 10; i++ {
        fmt.Println(f())
    }
}
