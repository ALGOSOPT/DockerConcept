1장. 여기는 적을게 없지만 이렇게 적장ㅎ_ㅎ
2장. 나는 한국인
3장. go는 이미 설치 했어.
4장. package. package는 header같은 것이다. fmt package는 print 함수들이 있는 것 같다.
5장. import를 한 번만 써도 되게 Go는 만들어 놓았다. 
6장. package에서 export 해 놓은 것을 import하면 사용할 수 있는데, Go에서는 첫 문자가 대문자로
    시작하면 그 package를 사용하는 곳에서 접근 할 수 있는 exported name이 됨.
7장. go에서 함수는 신기하게 parameter와 return 값의 type을 뒤에 씀.     
8장. go에서 parameter의 type이 같으면 마지막 것만 써도 된다.
9장. go에서는 함수가 여러개의 결과를 반환할 수 있다.
     func swap(x, y string) (string, string)
10장. 이름이 정해진 결과 - Named results. 
      결과에 이름을 붙이면 반환 값을 지정하지 않은 return 문장으로
      결과의 현재 값을 알아서 반환
      ex) func split(sum int) (x, y int){ //여기서 x와 y가 return 값으로 지정됨.
            x = sum* 4 / 9
            y = sum - x
            return          //자동으로 x와 y가 return됨.
          }
11장. 변수 선언을 위해서는 var라고 쓰고 뒤에 tpye을 적어준다.
12장. 변수 선언과 함께 변수 각각을 초기화 할 수 있는데
      초기화를 해서 변수 선언을 하면 type은 생략할 수 있음.
      var x, y, z int = 1, 2, 3 //여기서 굳이 int는 안적어도 됨
      var c, python, java = true, false, "no"!
13장. 함수 내에서  := 을 사용하면 변수 선언할 때 굳이 type을 안적어도 됨.
      하지만 중요한건 함수 밖에서는 := 선언을 사용할 수는 없음.
14장. 상수는 const 키워드와 함께 변수처럼 선언.
      상수는 char, string, bool, 숫자 타입으로 사용가능
15장. 숫자가 커지면 정밀하게 표현이 된다? e+29뭐 이런식으로 표현이 가능하다 이 것 같은데.
16장. go에서는 반복문이 for 밖에 없다(단 것도 while굳이 있어야 하나)
      소괄호가 필요없고 중괄호는 꼭 있어야 한다.
      for i := 0; i < 10; i++ {
        sum += i
      }
17장. for문에서 초기화화 변하는 것이 없고 조건만 있어도 된다.
18장. for문에서 조건문만 있으면 이 것이 while문! 
19장. for문에서 조건문까지 생략하면 무한 loop가 된다.
20장. if 문에서 조건 표현을 위한 소괄호는 생략하지만 실행을 위한 중괄호는 꼭 필요하다
21장. if 에서 조건문 앞에 짧은 문장을 실행할 수 있는데,
      이 짧은 문장에서 혹시 변수를 선언한다면 이 변수는 if 안쪽의 scope에서 
      실행이 가능하다.
      혹시나 하고 돌려봤는데 else에서도 사용 가능하다. 
22장. 오 21장에서 else는 안되나 했었는데 여기서 바로나오넹 ㅎ_ㅎ
23장. 연습. 
24장. 기본 자료형 bool, string, int, int8, int16, int32, int64
      byte == uint8, rune == int32, float32, float64, complex64, complex128
      그런데 복소수를 어떻게 표현한다는 거지? 그냥 계산만 한다는 건가?
25장. Structs. type 선언으로 struct의 이름을 지정할 수 있음.
      type Sangjo stuct {
        Amazing string
        Fantastic string
      }
26장. struct의 entity들은 .으로 접근
27장. Go에서는 pointer가 있는데 연산은 불가능함(아주 좋다!! 어딜 감히 메모리를 계산하려고)
      (아! 아닌가 메모리를 연산 불가능 한 점이 시스템 프로그래밍을 할 수 없는 이유가 되는 건가?
      
28장. struct literals
     {Name: value} 구문을 통해 field에 접근하여 할당할 수 있대.
     &을 사용하면 pointer 생성까지 가능~
29장. new 는 모든 field가 0이 할당된 포인터를 반환.
30장. slice는 배열의 값을 가지고, 길이를 가지고 있음. 배열이랑 좀 비슷한듯
      len 함수로 배열의 길이를 반환할 수 있다.
      []Type의 형태로 선언
31장. slice의 slicing. 슬라이스를 자를 수 있다. p[lo:hi]라고 하면 lo~hi-1까지의
      배열을 반환한다.
      그리고 p[:hi] 라고 하면 처음부터 hi - 1 까지.
      p[lo:]이라고 하면 lo부터 끝까지 배열을 반환한다.
32장. slice는  make함수로 만들 수 있다. 이렇게 생성된 slice는 0의 값을 
     할당한 배열을 생성하고 그 것을 refer함
     그리고 slice에서는 capacity의 개념이 있음.
     len과는 다른 len의 한계. 이 것은 make함수로 인자를 3개 넣으면 만들 수 있다.
     sl = make([]char, 10, 100)
     이라고 선언하면 len이 10이고 cap이 100임.
33장. slice의 zero value는 nil.
      nil slice의 길이와 최대 크기는 0
34장. for 반복문에서 range를 사용하면 slice를 순회할 수 있다.
      for i, v:= range pow {
      
      ...
      
      }
      라고 하면 i가 index, v가 value가 된다. 
      여기서 물론 i만 써도 된다. 
35장. 아 여기서 나오네!
      i만 쓰고 싶으면 for i := range pow 라고 하면되고
      value만 쓰고 싶으면
      for _, value := range pow라고 하면 됨
36장. 
        package main

        import "code.google.com/p/go-tour/pic"

        func Pic(dx, dy int) [][]uint8 {
            a := make([][]uint8, dy)
            b := make([]uint8, dx)
            for i := range b{
                b[i] =uint8(i)
            }
            for i := range a{
                a[i] = b
            }
            return a
        }

        func main() {
            pic.Show(Pic)
        }

37장. Maps은 값에 key를 기정.
      맵은 사용하기 전에 make를 반드시 명시해야함.
      make를 수행하지 않은 nil에는 값을 할당할 수 없음.
38장. Map literals. 리터럴이 구조체에다가 변수이름과 변수를 지정할 수 있음.
      Map literal은 반드시 key를 지정해야함. 
39장. 리터럴에서 타입명을 생략할 수도 있다고욤.
40장. 맵에 요서 삽입 or 수정 m[key] = elem
      값 가져요기 elem = m[key]
      요소 지우기 delete(m, key)
      키의 존재 여부 확인하기 elem, ok = m[key]
      여기서 ok는 값이 있으면 true, 없으면 false를 반환. 
41장. 
        package main

        import (
            "code.google.com/p/go-tour/wc"
            "strings"
        )

        func WordCount(s string) map[string]int {

            a := make(map[string]int)
            var st []string
            st = strings.Fields(s)

            for _, v := range st{
                a[v] += 1
            }
            return a
        }

        func main() {
            wc.Test(WordCount)
        }

42장. 함수도 값이래. C에서는 함수는 pointer였는데.       
43장. 함수는 클로져. 클로져 만의 sum 변수를 가진다.
44장. 
        package main

        import "fmt"

        // fibonacci is a function that returns
        // a function that returns an int.
        func fibonacci() func() int {
            a := 0
            b := 1
            return func() int{
                a, b = b, a + b
                return b
            }
        }

        func main() {
            f := fibonacci()
            for i := 0; i < 10; i++ {
                fmt.Println(f())
            }
        }
45장. switch. case의 코드 실행을 마치면 알아서 break함. 
46장. 각 switch의 조건은 위에서 아래로 판단함. 
47장. 조건을 생략한 switch는 true 라서 무조건 들어간다.
48장. 
package main
import "fmt"
import "math/cmplx"
func Cbrt(x complex128) complex128 {
    var z complex128 = complex128(1)
    for i := 0; i < 10; i++ {
    	z = z - (z * z * z - x) / (3 * z * z)
    }
    return z
}
func main() {
    fmt.Println(Cbrt(2))
    fmt.Println(cmplx.Pow(Cbrt(2),3))
}
50장. 아주 중요. method를 struct에 붙일 수 있음. methon receiver는 func 키워드와
      메소드 이름 사이에 인자로 들어간다. 이 것을 붙이면 이 struct 전용 함수가 된다는 뚯.
51장. method를 struct 뿐 아니라 아무 type에도 붙일 수 있지만 다른 package에 있는 거랑
        기본 타입만 아니면 아무 것에나 붙일 수있다. 
52장. pointer receiver를 사용하는 이유는 1 메소드가 호출 될 때 마다 값이 복사되는 것을 방지하
        기 위함. 2. 메소드에서 리시버 포인터가 가르키는 값을 수정하기 위함.
53장. 인터페이스느 method의 집합으로 정의. 
        interface안의 method는 그 이름과 반환값만 명시.
        그리고 struct든 typedef를 통해 만든 type이든 interface안의 method를
        receiver로 등록할 수 있으며, interface가 implment하는 곳은 main이나
        다른 함수의 logic으로 등록 할 수 있다.
54장. type이 interface의 method를 구현하면 interface를 구현한 것이 된다? 이 것이 뭔말이지
55장. error. error 라고 하는 특수 interface가 있음. 여기에는 Error() string method가 들어 있음.
      그래서 Error() string 이라고 하는 것을 receiver로 만들면 이 것을 쓸수있음.
      여기 질문 있음. 왜 Error()이 호출되지?
56장. 
package main
import (
    "fmt"
)
type ErrNegativeSqrt float64
func (e ErrNegativeSqrt) Error() string {
	return fmt.Sprintf("cannot Sqrt negative number: %f", e)
}
func Sqrt(f float64) (float64, error) {
    z := float64(1)
    if(f < 0) {
    	return 0, ErrNegativeSqrt(f)
    } else {
        for i := 0; i < 10; i++ {
     		z = z - (z * z * z - f) / (3 * z * z)
        }
        return z, nil
    }
}
func main() {
    fmt.Println(Sqrt(2))
    fmt.Println(Sqrt(-2))
}
57장. http와 관련된 requests를 제공하는 package가 http
58장. 
package main
import (
    "net/http"
    "fmt"
)
type String string
type Struct struct {
	Greeting string
	Punct    string
	Who      string
}
func (h *Struct) ServeHTTP(
    w http.ResponseWriter,
    r *http.Request) {
    fmt.Fprint(w, h.Greeting, h.Punct, h.Who)
    fmt.Println(h.Greeting, h.Punct, h.Who)
}
func (h String) ServeHTTP(
    w http.ResponseWriter,
    r *http.Request) {
    fmt.Fprint(w, h)
}
func main() {
    http.Handle("/string", String("I'm a frayed knot."))
	  http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})
    http.ListenAndServe("localhost:4000", nil)

59장. Image. package image.
60장. 
61장. 
62장. 동시성
63장. Goroutine은 Go runtime에 의해 관리되는 경량 Thread.
	go f(x,y,z) 는 새로운 Goroutine을 시작시킴.
	goroutine은 동일한 주소 공간에서 실행되므로 공유되는 자원으로의 접근은 
	동기화가 되어야 함.
	
	import (
		"fmt"
		"time"
	)
	
	func say(s string) {
		for i := 0; i < 5; i++ {
			time.Sleep(100 * time.Millisecond)
			fmt.Println(s)
		}
	}
	
	func main() {
		go say("world")
		say("hello")
	}
	
64장 Channels
	channel 은 channel 연산자 <- 를 이용해 값을 주고 받을 수 있는 type이 존재하는
	pipe.
	
	ch <- v //v를 ch로 보냄
	v := 	//ch로부터 값을 받아서
		//v로 넘김.
		
	map이나 slice처럼 채널은 사용되기 전에 생성되어야 함.
	ch := make(chan int)
	
	기본적으로, 송/수신은 상대편이 준비될 때 까지 블록됨.
	이런 특성이 Goroutine이 명시적인 lock이나 조건 없이도 동기화
	될 수 있도록 도움.

package main

import "fmt"

func sum(a [] int, c chan int) {
	sum := 0
	for _, v:= range a{
		sum += v
	}
	c <- sum // send sum to c
}

func main(){

	a := []int{7, 2, 8, -9, 4, 0}
	
	c := make(chan int)
	
	go sum(a[:len(a)/2], c)
	go sum(a[len(a)/2:], c)
	x, y := <-c. <-c //receive from c

	fmt.Println(x, y, x+y)
}

여기서 x에는 -5가 y에는 y 17이 들어가게 된다.
이 말은 같은  channel이면 stack으로 data가 들어가고 나가게 된다는 뜻이다.


65장. channel은 buffering 될 수 있음. make에 두번째 인자로 
	buffer 용량을 넣음으로써 해당 용량만큼 버퍼링되는 채널을
	생성할 수 있음.
	
	ch := make(chan int, 100)

	버퍼링 되는 channel로의 송신은 buffer가 꽉 찰 때까지 블록됨.
	수신은 buffer가 빌 때 블록됨.

66장. Range와 Close
	
	보내는 쪽이 channel로 더 이상 보낼 값이 없다는 것을 알리기 위해
	channel을 close할 수 있음.

	받는 쪽은 두번 째 인자로 채널이 닫혔는지를 test할 수 있음.
	
	보내는 쪽만 채널을 닫을 수 있음. 
	수신측에서는 채널을 닫을 수는 없다.
	
	
67장.  select 구문은 goroutine이 다수의 통신 동작으로부터 수행 준비를 기다릴 수 있게 함.
	select는 case 구문으로 받는 통신 동작들 중 하나가 수행될 수 있을 때까지 수행을
	블록함. 

	다수의 채널이 동시에 준비되면 그 중에 하나를 무작위로 선택함.

package main

import "fmt"

func fibonacci(c, quit chan int){
	x, y := 0, 1
	for {
		select {
		case c <- x:
			x, y = y, x + y
		case <- quit:
			fmt.Println("quit")
			return
		}
	}
}

func main(){
	c := make(chan int)
	quit := make(chan int)
	
	go func() {
		for i := 0; i < 10; i++ {
			fmt.Println(<-c)
		}
		quit <- 0
	}()

	fibonacci(c, quit)
}


68장. select의  default 케이스

	select 의 default case는 현재 수행 준비가 완료된 case가 없을 때 수행 됨.
	blocking 없이 보내고 받고를 할 때 default case를 사용하셈.

	select {
	case i := <-c:
	
	default:
	}


69장.
70장.
71장
72장.
	
	
